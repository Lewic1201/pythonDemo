    def test_get_ikepolicies(self):
        """获取IKE策略一览"""
        suf_api = '/ikepolicies'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_post_ikepolicies(self):
        """创建IKE策略"""
        suf_api = '/ikepolicies'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_get_ikepolicies_id(self):
        """获取IKE策略详情"""
        suf_api = '/ikepolicies/{id}'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_ipsec_connections(self):
        """获取VPN服务连接一览"""
        suf_api = '/ipsec-connections'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_post_ipsec_connections(self):
        """创建VPN服务连接"""
        suf_api = '/ipsec-connections'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_get_ipsec_connections_id(self):
        """获取VPN服务连接详情"""
        suf_api = '/ipsec-connections/{id}'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_ipsecpolicies(self):
        """获取IPSEC策略一览"""
        suf_api = '/ipsecpolicies'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_post_ipsecpolicies(self):
        """创建IPSEC策略"""
        suf_api = '/ipsecpolicies'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_get_ipsecpolicies_id(self):
        """获取IPSEC策略详情"""
        suf_api = '/ipsecpolicies/{id}'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_vpns(self):
        """获取VPN一览"""
        suf_api = '/vpns'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_post_vpns(self):
        """创建VPN"""
        suf_api = '/vpns'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_get_vpns_id(self):
        """获取VPN详情"""
        suf_api = '/vpns/{id}'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_put_vpns_id(self):
        """更新VPN"""
        suf_api = '/vpns/{id}'
        status_code, response_json = self.client.put(suf_api)
        self.assertEqual(status_code, 200)

    def test_delete_vpns_id(self):
        """删除VPN"""
        suf_api = '/vpns/{id}'
        status_code, response_json = self.client.delete(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_host_aggregates(self):
        """获取主机集群列表"""
        suf_api = '/host-aggregates'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_post_host_aggregates(self):
        """创建主机集群"""
        suf_api = '/host-aggregates'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_get_host_aggregates_id(self):
        """获取主机集群详情"""
        suf_api = '/host-aggregates/{id}'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_put_host_aggregates_id(self):
        """更新主机集群"""
        suf_api = '/host-aggregates/{id}'
        status_code, response_json = self.client.put(suf_api)
        self.assertEqual(status_code, 200)

    def test_delete_host_aggregates_id(self):
        """删除主机集群"""
        suf_api = '/host-aggregates/{id}'
        status_code, response_json = self.client.delete(suf_api)
        self.assertEqual(status_code, 200)

    def test_put_host_aggregates_id_add(self):
        """主机集群添加主机"""
        suf_api = '/host-aggregates/{id}/add'
        status_code, response_json = self.client.put(suf_api)
        self.assertEqual(status_code, 200)

    def test_put_host_aggregates_id_remove(self):
        """主机集群移除主机"""
        suf_api = '/host-aggregates/{id}/remove'
        status_code, response_json = self.client.put(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_hosts(self):
        """获取主机列表"""
        suf_api = '/hosts'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_hosts_id(self):
        """获取主机详情"""
        suf_api = '/hosts/{id}'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_instances(self):
        """获取云主机列表"""
        suf_api = '/instances'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_post_instances(self):
        """创建云主机"""
        suf_api = '/instances'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_delete_instances(self):
        """真批量删除云主机"""
        suf_api = '/instances'
        status_code, response_json = self.client.delete(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_instances_id(self):
        """获取云主机详情"""
        suf_api = '/instances/{id}'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_put_instances_id(self):
        """更新云主机"""
        suf_api = '/instances/{id}'
        status_code, response_json = self.client.put(suf_api)
        self.assertEqual(status_code, 200)

    def test_delete_instances_id(self):
        """删除单个云主机(立即删除)"""
        suf_api = '/instances/{id}'
        status_code, response_json = self.client.delete(suf_api)
        self.assertEqual(status_code, 200)

    def test_post_instances_id_backup(self):
        """创建云主机备份"""
        suf_api = '/instances/{id}/backup'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_post_instances_id_forceRestart(self):
        """硬重启云主机"""
        suf_api = '/instances/{id}/forceRestart'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_post_instances_id_image_imageName_type_type(self):
        """创建主机镜像"""
        suf_api = '/instances/{id}/image/{imageName}/type/{type}'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_post_instances_id_liveMigration_hostName(self):
        """迁移云主机"""
        suf_api = '/instances/{id}/liveMigration/{hostName}'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_get_instances_id_os_getRDPConsole(self):
        """获取RDP控制台"""
        suf_api = '/instances/{id}/os-getRDPConsole'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_instances_id_os_getSerialConsole(self):
        """获取serial控制台"""
        suf_api = '/instances/{id}/os-getSerialConsole'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_instances_id_os_getSPICEConsole(self):
        """获取spice控制台"""
        suf_api = '/instances/{id}/os-getSPICEConsole'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_instances_id_os_getVNCConsole(self):
        """获取vnc控制台"""
        suf_api = '/instances/{id}/os-getVNCConsole'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_post_instances_id_os_getVNCConsole(self):
        """获取vnc控制台"""
        suf_api = '/instances/{id}/os-getVNCConsole'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_put_instances_id_os_getVNCConsole(self):
        """获取vnc控制台"""
        suf_api = '/instances/{id}/os-getVNCConsole'
        status_code, response_json = self.client.put(suf_api)
        self.assertEqual(status_code, 200)

    def test_delete_instances_id_os_getVNCConsole(self):
        """获取vnc控制台"""
        suf_api = '/instances/{id}/os-getVNCConsole'
        status_code, response_json = self.client.delete(suf_api)
        self.assertEqual(status_code, 200)

    def test_options_instances_id_os_getVNCConsole(self):
        """获取vnc控制台"""
        suf_api = '/instances/{id}/os-getVNCConsole'
        status_code, response_json = self.client.options(suf_api)
        self.assertEqual(status_code, 200)

    def test_patch_instances_id_os_getVNCConsole(self):
        """获取vnc控制台"""
        suf_api = '/instances/{id}/os-getVNCConsole'
        status_code, response_json = self.client.patch(suf_api)
        self.assertEqual(status_code, 200)

    def test_post_instances_id_pause(self):
        """暂停云主机"""
        suf_api = '/instances/{id}/pause'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_post_instances_id_ports(self):
        """云主机添加端口"""
        suf_api = '/instances/{id}/ports'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_delete_instances_id_ports_portId(self):
        """云主机移除端口"""
        suf_api = '/instances/{id}/ports/{portId}'
        status_code, response_json = self.client.delete(suf_api)
        self.assertEqual(status_code, 200)

    def test_post_instances_id_reset_password(self):
        """云主机重置密码"""
        suf_api = '/instances/{id}/reset-password'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_post_instances_id_resize_flavorId(self):
        """调整云主机规格"""
        suf_api = '/instances/{id}/resize/{flavorId}'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_post_instances_id_restart(self):
        """软重启云主机"""
        suf_api = '/instances/{id}/restart'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_post_instances_id_resume(self):
        """恢复云主机"""
        suf_api = '/instances/{id}/resume'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_post_instances_id_snapshots(self):
        """创建云主机快照"""
        suf_api = '/instances/{id}/snapshots'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_post_instances_id_start(self):
        """开启云主机"""
        suf_api = '/instances/{id}/start'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_post_instances_id_stop(self):
        """关闭云主机"""
        suf_api = '/instances/{id}/stop'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_post_instances_id_suspend(self):
        """挂起云主机"""
        suf_api = '/instances/{id}/suspend'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_post_instances_id_unpause(self):
        """取消暂停云主机"""
        suf_api = '/instances/{id}/unpause'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_get_instances_id_volumes(self):
        """获取云主机硬盘列表"""
        suf_api = '/instances/{id}/volumes'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_post_instances_id_volumes(self):
        """云主机添加硬盘"""
        suf_api = '/instances/{id}/volumes'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_delete_instances_id_volumes_volumeId(self):
        """云主机移除硬盘"""
        suf_api = '/instances/{id}/volumes/{volumeId}'
        status_code, response_json = self.client.delete(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_instances_config(self):
        """获取云主机配置"""
        suf_api = '/instances/config'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_delete_instances_reclaim(self):
        """删除云主机(批量删除，不立刻删除，进入资源回收区。后台择机删除)"""
        suf_api = '/instances/reclaim'
        status_code, response_json = self.client.delete(suf_api)
        self.assertEqual(status_code, 200)

    def test_post_instances_startHA(self):
        """开启云主机HA(批量)"""
        suf_api = '/instances/startHA'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_post_instances_stopHA(self):
        """关闭云主机HA(批量)"""
        suf_api = '/instances/stopHA'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_put_instances_unDelete(self):
        """取消删除云主机()"""
        suf_api = '/instances/unDelete'
        status_code, response_json = self.client.put(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_vdi_instances(self):
        """获取云桌面一览"""
        suf_api = '/vdi-instances'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_post_vdi_instances(self):
        """创建云桌面"""
        suf_api = '/vdi-instances'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_get_vdi_instances_id(self):
        """获取云桌面详细"""
        suf_api = '/vdi-instances/{id}'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_vdi_instances_config(self):
        """获取云桌面配置"""
        suf_api = '/vdi-instances/config'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_volumeQos(self):
        """获取云硬盘QoS一览"""
        suf_api = '/volumeQos'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_post_volumeQos(self):
        """创建云硬盘QoS"""
        suf_api = '/volumeQos'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_get_volumeQos_id(self):
        """获取云硬盘QoS详情"""
        suf_api = '/volumeQos/{id}'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_delete_volumeQos_id(self):
        """删除云硬盘QoS"""
        suf_api = '/volumeQos/{id}'
        status_code, response_json = self.client.delete(suf_api)
        self.assertEqual(status_code, 200)

    def test_put_volumeQos_id_attach_volumeTypeId(self):
        """云硬盘类型绑定云硬盘QoS"""
        suf_api = '/volumeQos/{id}/attach/{volumeTypeId}'
        status_code, response_json = self.client.put(suf_api)
        self.assertEqual(status_code, 200)

    def test_put_volumeQos_id_detach_volumeTypeId(self):
        """云硬盘类型解绑云硬盘QoS"""
        suf_api = '/volumeQos/{id}/detach/{volumeTypeId}'
        status_code, response_json = self.client.put(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_volumes(self):
        """获取云硬盘一览"""
        suf_api = '/volumes'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_post_volumes(self):
        """创建云硬盘"""
        suf_api = '/volumes'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_delete_volumes(self):
        """批量删除云硬盘"""
        suf_api = '/volumes'
        status_code, response_json = self.client.delete(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_volumes_id(self):
        """获取云硬盘详情"""
        suf_api = '/volumes/{id}'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_put_volumes_id(self):
        """更新云硬盘"""
        suf_api = '/volumes/{id}'
        status_code, response_json = self.client.put(suf_api)
        self.assertEqual(status_code, 200)

    def test_delete_volumes_id(self):
        """删除云硬盘"""
        suf_api = '/volumes/{id}'
        status_code, response_json = self.client.delete(suf_api)
        self.assertEqual(status_code, 200)

    def test_put_volumes_id_size(self):
        """扩充云硬盘"""
        suf_api = '/volumes/{id}/{size}'
        status_code, response_json = self.client.put(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_volumes_config(self):
        """获取云硬盘配置"""
        suf_api = '/volumes/config'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_volumes_backend(self):
        """获取存储后端一览"""
        suf_api = '/volumes-backend'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_volumes_type(self):
        """获取云硬盘类型一览"""
        suf_api = '/volumes-type'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_post_volumes_type(self):
        """创建云硬盘类型"""
        suf_api = '/volumes-type'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_get_volumes_type_id(self):
        """获取云硬盘类型详情"""
        suf_api = '/volumes-type/{id}'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_put_volumes_type_id(self):
        """更新云硬盘类型"""
        suf_api = '/volumes-type/{id}'
        status_code, response_json = self.client.put(suf_api)
        self.assertEqual(status_code, 200)

    def test_delete_volumes_type_id(self):
        """删除云硬盘类型"""
        suf_api = '/volumes-type/{id}'
        status_code, response_json = self.client.delete(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_regions(self):
        """获取区域一览"""
        suf_api = '/regions'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_put_regions_id(self):
        """更新当前区域"""
        suf_api = '/regions/{id}'
        status_code, response_json = self.client.put(suf_api)
        self.assertEqual(status_code, 200)

    def test_post_rating_init(self):
        """初始化计费信息"""
        suf_api = '/rating-init'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_post_rating_policies_id(self):
        """创建计费策略"""
        suf_api = '/rating-policies/{id}'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_get_rating_policies_id_fieldId(self):
        """获取计费条目详情"""
        suf_api = '/rating-policies/{id}/{fieldId}'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_rating_services(self):
        """获取计费的服务列表"""
        suf_api = '/rating-services'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_post_rating_services(self):
        """创建可计费的服务"""
        suf_api = '/rating-services'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_get_rating_services_id(self):
        """获取计费的服务详情"""
        suf_api = '/rating-services/{id}'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_rating_tenants(self):
        """获取组织和单价模板映射列表"""
        suf_api = '/rating-tenants'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_post_rating_tenants(self):
        """适用单价模板"""
        suf_api = '/rating-tenants'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_get_rating_tenants_id(self):
        """获取组织和单价模板映射"""
        suf_api = '/rating-tenants/{id}'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_put_rating_tenants_id(self):
        """更新租户计费模板"""
        suf_api = '/rating-tenants/{id}'
        status_code, response_json = self.client.put(suf_api)
        self.assertEqual(status_code, 200)

    def test_delete_rating_tenants_id(self):
        """取消组织适用的单价模板"""
        suf_api = '/rating-tenants/{id}'
        status_code, response_json = self.client.delete(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_rating_versions(self):
        """获取单价模板版本列表"""
        suf_api = '/rating-versions'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_rating_versions_id(self):
        """获取单价模板版本详情"""
        suf_api = '/rating-versions/{id}'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_put_rating_versions_id(self):
        """更新计费版本"""
        suf_api = '/rating-versions/{id}'
        status_code, response_json = self.client.put(suf_api)
        self.assertEqual(status_code, 200)

    def test_delete_rating_versions_id(self):
        """删除计费版本"""
        suf_api = '/rating-versions/{id}'
        status_code, response_json = self.client.delete(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_templates(self):
        """获取单价模板列表"""
        suf_api = '/templates'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_post_templates(self):
        """创建单价模板"""
        suf_api = '/templates'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_get_templates_id(self):
        """获取单价模板详情"""
        suf_api = '/templates/{id}'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_put_templates_id(self):
        """更新单价模板"""
        suf_api = '/templates/{id}'
        status_code, response_json = self.client.put(suf_api)
        self.assertEqual(status_code, 200)

    def test_delete_templates_id(self):
        """删除单价模板"""
        suf_api = '/templates/{id}'
        status_code, response_json = self.client.delete(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_k8scontainers(self):
        """check用户是否已经开通容器服务"""
        suf_api = '/k8scontainers'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_post_k8scontainers(self):
        """开启容器服务"""
        suf_api = '/k8scontainers'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_get_k8scontainers_config(self):
        """获取容器配置"""
        suf_api = '/k8scontainers/config'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_k8scontainers_containers(self):
        """获取容器列表"""
        suf_api = '/k8scontainers/containers'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_post_k8scontainers_containers(self):
        """创建容器"""
        suf_api = '/k8scontainers/containers'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_get_k8scontainers_containers_id(self):
        """获取容器详细信息"""
        suf_api = '/k8scontainers/containers/{id}'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_delete_k8scontainers_containers_id(self):
        """删除容器"""
        suf_api = '/k8scontainers/containers/{id}'
        status_code, response_json = self.client.delete(suf_api)
        self.assertEqual(status_code, 200)

    def test_delete_k8scontainers_namespaces_name(self):
        """关闭容器服务"""
        suf_api = '/k8scontainers/namespaces/{name}'
        status_code, response_json = self.client.delete(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_k8scontainers_networksetting(self):
        """获取容器网络设置"""
        suf_api = '/k8scontainers/networksetting'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_k8scontainers_volumes(self):
        """获取容器磁盘列表"""
        suf_api = '/k8scontainers/volumes'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_post_k8scontainers_volumes(self):
        """创建容器磁盘"""
        suf_api = '/k8scontainers/volumes'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_get_k8scontainers_volumes_id(self):
        """获取容器磁盘详情"""
        suf_api = '/k8scontainers/volumes/{id}'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_put_k8scontainers_volumes_id(self):
        """更新容器磁盘"""
        suf_api = '/k8scontainers/volumes/{id}'
        status_code, response_json = self.client.put(suf_api)
        self.assertEqual(status_code, 200)

    def test_delete_k8scontainers_volumes_id(self):
        """删除容器磁盘"""
        suf_api = '/k8scontainers/volumes/{id}'
        status_code, response_json = self.client.delete(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_k8svolumes_config(self):
        """获取容器磁盘配置"""
        suf_api = '/k8svolumes/config'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_containerimages(self):
        """获取容器镜像列表"""
        suf_api = '/containerimages'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_post_containerimages(self):
        """创建容器镜像"""
        suf_api = '/containerimages'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_get_containerimages_id(self):
        """获取容器镜像列详情"""
        suf_api = '/containerimages/{id}'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_put_containerimages_id(self):
        """更新容器镜像"""
        suf_api = '/containerimages/{id}'
        status_code, response_json = self.client.put(suf_api)
        self.assertEqual(status_code, 200)

    def test_delete_containerimages_id(self):
        """删除容器镜像"""
        suf_api = '/containerimages/{id}'
        status_code, response_json = self.client.delete(suf_api)
        self.assertEqual(status_code, 200)

    def test_post_containerimages_id_file(self):
        """上传镜像"""
        suf_api = '/containerimages/{id}/file'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_put_containerimages_id_file(self):
        """通知开始上传文件"""
        suf_api = '/containerimages/{id}/file'
        status_code, response_json = self.client.put(suf_api)
        self.assertEqual(status_code, 200)

    def test_put_containerimages_id_file_filename(self):
        """通知上传文件完成"""
        suf_api = '/containerimages/{id}/file/{filename}'
        status_code, response_json = self.client.put(suf_api)
        self.assertEqual(status_code, 200)

    def test_put_containerimages_id_status_status(self):
        """重置容器镜像状态"""
        suf_api = '/containerimages/{id}/status/{status}'
        status_code, response_json = self.client.put(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_workflow_processDefinition_id(self):
        """获取工作流定义详情"""
        suf_api = '/workflow/processDefinition/{id}'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_put_workflow_processDefinition_id(self):
        """更新流程定义信息"""
        suf_api = '/workflow/processDefinition/{id}'
        status_code, response_json = self.client.put(suf_api)
        self.assertEqual(status_code, 200)

    def test_put_workflow_processDefinition_id_action(self):
        """启用/禁用流程定义"""
        suf_api = '/workflow/processDefinition/{id}/{action}'
        status_code, response_json = self.client.put(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_workflow_processDefinitions(self):
        """获取工作流定义列表"""
        suf_api = '/workflow/processDefinitions'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_put_workflow_step_id(self):
        """更新流程步骤信息"""
        suf_api = '/workflow/step/{id}'
        status_code, response_json = self.client.put(suf_api)
        self.assertEqual(status_code, 200)

    def test_put_workflow_step_id_action(self):
        """启用/禁用流程步骤"""
        suf_api = '/workflow/step/{id}/{action}'
        status_code, response_json = self.client.put(suf_api)
        self.assertEqual(status_code, 200)

    def test_post_workflow_steps(self):
        """新建流程步骤信息"""
        suf_api = '/workflow/steps'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_get_aggregation_info(self):
        """获取集群中资源信息"""
        suf_api = '/aggregation-info'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_configurations(self):
        """获取平台设置"""
        suf_api = '/configurations'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_put_configurations(self):
        """更新平台设置"""
        suf_api = '/configurations'
        status_code, response_json = self.client.put(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_overcommits(self):
        """获取超配比"""
        suf_api = '/overcommits'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_put_overcommits(self):
        """更新超配比"""
        suf_api = '/overcommits'
        status_code, response_json = self.client.put(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_platform_hosts(self):
        """获取物理机列表"""
        suf_api = '/platform/hosts'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_platform_hosts_id(self):
        """获取物理机详情"""
        suf_api = '/platform/hosts/{id}'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_platform_resources(self):
        """获取主机资源使用信息"""
        suf_api = '/platform/resources'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_resource_state(self):
        """获取同步中资源列表"""
        suf_api = '/resource-state'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_total_resources(self):
        """获取平台资源信息"""
        suf_api = '/total-resources'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_topology(self):
        """获取网络拓扑图"""
        suf_api = '/topology'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_datastores(self):
        """获取数据库一览"""
        suf_api = '/datastores'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_dbinstances(self):
        """获取所有数据库主机一览"""
        suf_api = '/dbinstances'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_post_dbinstances(self):
        """创建数据库主机"""
        suf_api = '/dbinstances'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_get_dbinstances_id(self):
        """获取数据库主机详细"""
        suf_api = '/dbinstances/{id}'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_delete_dbinstances_id(self):
        """删除数据库主机"""
        suf_api = '/dbinstances/{id}'
        status_code, response_json = self.client.delete(suf_api)
        self.assertEqual(status_code, 200)

    def test_delete_dbinstances_id_dbs_dbId(self):
        """删除数据库"""
        suf_api = '/dbinstances/{id}/dbs/{dbId}'
        status_code, response_json = self.client.delete(suf_api)
        self.assertEqual(status_code, 200)

    def test_post_dbinstances_id_restart(self):
        """重启数据库主机"""
        suf_api = '/dbinstances/{id}/restart'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_get_dbinstances_id_users(self):
        """获取数据库用户"""
        suf_api = '/dbinstances/{id}/users'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_post_dbinstances_id_users(self):
        """添加数据库用户"""
        suf_api = '/dbinstances/{id}/users'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_delete_dbinstances_id_users_userId(self):
        """移除数据库用户"""
        suf_api = '/dbinstances/{id}/users/{userId}'
        status_code, response_json = self.client.delete(suf_api)
        self.assertEqual(status_code, 200)

    def test_post_dbinstances_id_users_userId_databases(self):
        """给予用户访问权限"""
        suf_api = '/dbinstances/{id}/users/{userId}/databases'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_put_dbinstances_id_users_userId_databases(self):
        """修改用户访问权限"""
        suf_api = '/dbinstances/{id}/users/{userId}/databases'
        status_code, response_json = self.client.put(suf_api)
        self.assertEqual(status_code, 200)

    def test_delete_dbinstances_id_users_userId_databases(self):
        """取消用户访问权限"""
        suf_api = '/dbinstances/{id}/users/{userId}/databases'
        status_code, response_json = self.client.delete(suf_api)
        self.assertEqual(status_code, 200)

    def test_post_dbinstances_instanceId_dbs(self):
        """创建数据库"""
        suf_api = '/dbinstances/{instanceId}/dbs'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_get_dbinstances_config(self):
        """获取数据库配置"""
        suf_api = '/dbinstances/config'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_nonRelationalDatabases(self):
        """获取非关系型数据库一览"""
        suf_api = '/nonRelationalDatabases'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_relationalDatabases(self):
        """获取关系型数据库主机一览"""
        suf_api = '/relationalDatabases'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_operations(self):
        """获取操作日志列表"""
        suf_api = '/operations'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_delete_operations(self):
        """删除操作日志"""
        suf_api = '/operations'
        status_code, response_json = self.client.delete(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_operations_id(self):
        """获取操作日志详情"""
        suf_api = '/operations/{id}'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_operations_export(self):
        """导出操作日志"""
        suf_api = '/operations/export'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_chassis(self):
        """获取机架列表"""
        suf_api = '/chassis'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_post_chassis(self):
        """创建机架"""
        suf_api = '/chassis'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_get_chassis_id(self):
        """获取机架详情"""
        suf_api = '/chassis/{id}'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_permissions(self):
        """获取权限列表"""
        suf_api = '/permissions'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_permissions_get(self):
        """获取全部注解"""
        suf_api = '/permissions/get'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_permissions_set(self):
        """刷新全部注解"""
        suf_api = '/permissions/set'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_workflow_processInstance(self):
        """取得所有与当前用户相关的流程实例"""
        suf_api = '/workflow/processInstance'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_workflow_processInstance_id(self):
        """获取流程实例详情"""
        suf_api = '/workflow/processInstance/{id}'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_put_workflow_processInstance_id(self):
        """再次申请流程"""
        suf_api = '/workflow/processInstance/{id}'
        status_code, response_json = self.client.put(suf_api)
        self.assertEqual(status_code, 200)

    def test_delete_workflow_processInstance_id(self):
        """删除流程实例"""
        suf_api = '/workflow/processInstance/{id}'
        status_code, response_json = self.client.delete(suf_api)
        self.assertEqual(status_code, 200)

    def test_post_workflow_task_id_action(self):
        """审批流程"""
        suf_api = '/workflow/task/{id}/{action}'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_delete_workflow_role_id(self):
        """删除权限"""
        suf_api = '/workflow/role/{id}'
        status_code, response_json = self.client.delete(suf_api)
        self.assertEqual(status_code, 200)

    def test_post_workflow_role_origUserAccount_delegateRole_targetUserAccount(self):
        """将审批权限赋予其他人"""
        suf_api = '/workflow/role/{origUserAccount}/delegateRole/{targetUserAccount}'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_delete_workflow_role_delegateRole_id(self):
        """收回审批权限"""
        suf_api = '/workflow/role/delegateRole/{id}'
        status_code, response_json = self.client.delete(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_workflow_roles(self):
        """根据条件查询权限列表"""
        suf_api = '/workflow/roles'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_post_workflow_roles(self):
        """批量绑定权限"""
        suf_api = '/workflow/roles'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_put_workflow_roles_id(self):
        """更新绑定权限"""
        suf_api = '/workflow/roles/{id}'
        status_code, response_json = self.client.put(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_floating_ips(self):
        """获取浮动IP列表"""
        suf_api = '/floating-ips'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_post_floating_ips(self):
        """创建浮动IP"""
        suf_api = '/floating-ips'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_get_floating_ips_id(self):
        """获取浮动IP详情"""
        suf_api = '/floating-ips/{id}'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_put_floating_ips_id(self):
        """更新浮动IP"""
        suf_api = '/floating-ips/{id}'
        status_code, response_json = self.client.put(suf_api)
        self.assertEqual(status_code, 200)

    def test_delete_floating_ips_id(self):
        """删除浮动IP"""
        suf_api = '/floating-ips/{id}'
        status_code, response_json = self.client.delete(suf_api)
        self.assertEqual(status_code, 200)

    def test_delete_floating_ips_id_port(self):
        """浮动IP解绑端口"""
        suf_api = '/floating-ips/{id}/port'
        status_code, response_json = self.client.delete(suf_api)
        self.assertEqual(status_code, 200)

    def test_put_floating_ips_id_port_portId(self):
        """浮动IP绑定端口"""
        suf_api = '/floating-ips/{id}/port/{portId}'
        status_code, response_json = self.client.put(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_floating_ips_config(self):
        """获取浮动IP配置"""
        suf_api = '/floating-ips/config'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_bare_metals(self):
        """获取物理节点信息一览"""
        suf_api = '/bare-metals'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_post_bare_metals(self):
        """创建物理节点"""
        suf_api = '/bare-metals'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_get_bare_metals_id(self):
        """获取物理节点信息详情"""
        suf_api = '/bare-metals/{id}'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_put_bare_metals_id(self):
        """更新物理机电源状态"""
        suf_api = '/bare-metals/{id}'
        status_code, response_json = self.client.put(suf_api)
        self.assertEqual(status_code, 200)

    def test_delete_bare_metals_id(self):
        """删除物理节点"""
        suf_api = '/bare-metals/{id}'
        status_code, response_json = self.client.delete(suf_api)
        self.assertEqual(status_code, 200)

    def test_patch_bare_metals_id(self):
        """更新物理节点"""
        suf_api = '/bare-metals/{id}'
        status_code, response_json = self.client.patch(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_bare_metals_config(self):
        """获取物理机配置"""
        suf_api = '/bare-metals/config'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_delete_bare_metals_delete(self):
        """批量删除物理机"""
        suf_api = '/bare-metals/delete'
        status_code, response_json = self.client.delete(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_bare_metals_flavors(self):
        """获取物理机规格信息"""
        suf_api = '/bare-metals/flavors'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_bare_metals_instances(self):
        """获取物理机一览"""
        suf_api = '/bare-metals/instances'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_post_bare_metals_instances(self):
        """创建物理机"""
        suf_api = '/bare-metals/instances'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_get_bare_metals_instances_id(self):
        """获取物理机详细"""
        suf_api = '/bare-metals/instances/{id}'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_put_bare_metals_power_action(self):
        """一次开机/关机/重启 多台裸机"""
        suf_api = '/bare-metals/power/{action}'
        status_code, response_json = self.client.put(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_auth_sign_up(self):
        """注册用户"""
        suf_api = '/auth/sign-up'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_post_auth_sign_up(self):
        """注册用户"""
        suf_api = '/auth/sign-up'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_put_auth_sign_up(self):
        """注册用户"""
        suf_api = '/auth/sign-up'
        status_code, response_json = self.client.put(suf_api)
        self.assertEqual(status_code, 200)

    def test_delete_auth_sign_up(self):
        """注册用户"""
        suf_api = '/auth/sign-up'
        status_code, response_json = self.client.delete(suf_api)
        self.assertEqual(status_code, 200)

    def test_options_auth_sign_up(self):
        """注册用户"""
        suf_api = '/auth/sign-up'
        status_code, response_json = self.client.options(suf_api)
        self.assertEqual(status_code, 200)

    def test_patch_auth_sign_up(self):
        """注册用户"""
        suf_api = '/auth/sign-up'
        status_code, response_json = self.client.patch(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_ddhs(self):
        """获取用户订单"""
        suf_api = '/ddhs'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_put_user_tenant_name(self):
        """切换组织"""
        suf_api = '/user-tenant/{name}'
        status_code, response_json = self.client.put(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_users(self):
        """获取用户列表"""
        suf_api = '/users'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_post_users(self):
        """创建用户"""
        suf_api = '/users'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_delete_users(self):
        """删除用户"""
        suf_api = '/users'
        status_code, response_json = self.client.delete(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_users_id(self):
        """获取用户详情"""
        suf_api = '/users/{id}'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_delete_users_id(self):
        """删除用户"""
        suf_api = '/users/{id}'
        status_code, response_json = self.client.delete(suf_api)
        self.assertEqual(status_code, 200)

    def test_put_users_id_action(self):
        """用户操作"""
        suf_api = '/users/{id}/{action}'
        status_code, response_json = self.client.put(suf_api)
        self.assertEqual(status_code, 200)

    def test_put_users_id_bind_ddh(self):
        """为用户绑定订单号"""
        suf_api = '/users/{id}/bind/{ddh}'
        status_code, response_json = self.client.put(suf_api)
        self.assertEqual(status_code, 200)

    def test_delete_users_destroy(self):
        """用户销户"""
        suf_api = '/users/destroy'
        status_code, response_json = self.client.delete(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_skins(self):
        """获取皮肤"""
        suf_api = '/skins'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_post_skins(self):
        """创建皮肤"""
        suf_api = '/skins'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_get_alarms(self):
        """获取监控列表"""
        suf_api = '/alarms'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_post_alarms(self):
        """创建监控"""
        suf_api = '/alarms'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_get_alarms_id(self):
        """获取监控详情"""
        suf_api = '/alarms/{id}'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_put_alarms_id(self):
        """更新监控"""
        suf_api = '/alarms/{id}'
        status_code, response_json = self.client.put(suf_api)
        self.assertEqual(status_code, 200)

    def test_delete_alarms_id(self):
        """删除监控"""
        suf_api = '/alarms/{id}'
        status_code, response_json = self.client.delete(suf_api)
        self.assertEqual(status_code, 200)

    def test_put_alarms_id_action(self):
        """监控操作"""
        suf_api = '/alarms/{id}/action'
        status_code, response_json = self.client.put(suf_api)
        self.assertEqual(status_code, 200)

    def test_post_alarms_id_resources(self):
        """添加监控对象"""
        suf_api = '/alarms/{id}/resources'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_delete_alarms_id_resources_resourceId(self):
        """移除监控对象"""
        suf_api = '/alarms/{id}/resources/{resourceId}'
        status_code, response_json = self.client.delete(suf_api)
        self.assertEqual(status_code, 200)

    def test_post_alarms_id_rules(self):
        """添加监控规则"""
        suf_api = '/alarms/{id}/rules'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_delete_alarms_id_rules(self):
        """移除监控规则"""
        suf_api = '/alarms/{id}/rules'
        status_code, response_json = self.client.delete(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_alarms_config(self):
        """获取监控配置"""
        suf_api = '/alarms/config'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_alarms_export_vm_history(self):
        """导出监控数据"""
        suf_api = '/alarms/export-vm-history'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_alarms_getVMStatics(self):
        """获取云主机监控数据"""
        suf_api = '/alarms/getVMStatics'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_alarms_monitorobjs(self):
        """获取可被监控的对象列表"""
        suf_api = '/alarms/monitorobjs'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_monitors(self):
        """获取监控模板列表"""
        suf_api = '/monitors'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_post_monitors(self):
        """创建监控模板"""
        suf_api = '/monitors'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_get_monitors_id(self):
        """获取监控模板详情"""
        suf_api = '/monitors/{id}'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_put_monitors_id(self):
        """更新监控模板"""
        suf_api = '/monitors/{id}'
        status_code, response_json = self.client.put(suf_api)
        self.assertEqual(status_code, 200)

    def test_delete_monitors_id(self):
        """删除监控模板"""
        suf_api = '/monitors/{id}'
        status_code, response_json = self.client.delete(suf_api)
        self.assertEqual(status_code, 200)

    def test_put_monitors_id_tenantId(self):
        """适用监控模板"""
        suf_api = '/monitors/{id}/{tenantId}'
        status_code, response_json = self.client.put(suf_api)
        self.assertEqual(status_code, 200)

    def test_delete_monitors_id_tenantId(self):
        """取消适用监控模板"""
        suf_api = '/monitors/{id}/{tenantId}'
        status_code, response_json = self.client.delete(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_monitors_apply(self):
        """获取当前适用的监控模板"""
        suf_api = '/monitors/apply'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_monitors_config(self):
        """获取监控模板配置"""
        suf_api = '/monitors/config'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_monitors_containers(self):
        """获取监控的容器信息"""
        suf_api = '/monitors/containers'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_monitors_services(self):
        """获取监控的服务信息"""
        suf_api = '/monitors/services'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_monitors_vms(self):
        """获取监控的云主机信息"""
        suf_api = '/monitors/vms'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_snapshots(self):
        """获取云硬盘快照一览"""
        suf_api = '/snapshots'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_post_snapshots(self):
        """创建云硬盘快照"""
        suf_api = '/snapshots'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_get_snapshots_id(self):
        """获取云硬盘快照详情"""
        suf_api = '/snapshots/{id}'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_put_snapshots_id(self):
        """更新云硬盘快照"""
        suf_api = '/snapshots/{id}'
        status_code, response_json = self.client.put(suf_api)
        self.assertEqual(status_code, 200)

    def test_delete_snapshots_id(self):
        """删除云硬盘快照"""
        suf_api = '/snapshots/{id}'
        status_code, response_json = self.client.delete(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_ports(self):
        """获取端口列表"""
        suf_api = '/ports'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_post_ports(self):
        """创建端口"""
        suf_api = '/ports'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_get_ports_id(self):
        """获取端口详情"""
        suf_api = '/ports/{id}'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_put_ports_id(self):
        """更新端口"""
        suf_api = '/ports/{id}'
        status_code, response_json = self.client.put(suf_api)
        self.assertEqual(status_code, 200)

    def test_delete_ports_id(self):
        """删除端口"""
        suf_api = '/ports/{id}'
        status_code, response_json = self.client.delete(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_mytenants(self):
        """获取当前可切换组织"""
        suf_api = '/mytenants'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_put_tenant_language_locale(self):
        """切换语言"""
        suf_api = '/tenant-language/{locale}'
        status_code, response_json = self.client.put(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_tenants(self):
        """获取组织列表"""
        suf_api = '/tenants'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_post_tenants(self):
        """创建组织"""
        suf_api = '/tenants'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_get_tenants_id(self):
        """获取组织详情"""
        suf_api = '/tenants/{id}'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_put_tenants_id(self):
        """更新组织"""
        suf_api = '/tenants/{id}'
        status_code, response_json = self.client.put(suf_api)
        self.assertEqual(status_code, 200)

    def test_delete_tenants_id(self):
        """删除组织"""
        suf_api = '/tenants/{id}'
        status_code, response_json = self.client.delete(suf_api)
        self.assertEqual(status_code, 200)

    def test_put_tenants_id_add(self):
        """添加组织用户"""
        suf_api = '/tenants/{id}/add'
        status_code, response_json = self.client.put(suf_api)
        self.assertEqual(status_code, 200)

    def test_put_tenants_id_addRole(self):
        """添加组织用户角色"""
        suf_api = '/tenants/{id}/addRole'
        status_code, response_json = self.client.put(suf_api)
        self.assertEqual(status_code, 200)

    def test_put_tenants_id_remove(self):
        """移除组织用户"""
        suf_api = '/tenants/{id}/remove'
        status_code, response_json = self.client.put(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_networkQos(self):
        """获取网络QoS列表"""
        suf_api = '/networkQos'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_post_networkQos(self):
        """创建网络QoS"""
        suf_api = '/networkQos'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_get_networkQos_id(self):
        """获取网络QoS详情"""
        suf_api = '/networkQos/{id}'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_networks(self):
        """获取网络列表"""
        suf_api = '/networks'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_post_networks(self):
        """创建网络"""
        suf_api = '/networks'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_get_networks_id(self):
        """获取网络详情"""
        suf_api = '/networks/{id}'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_put_networks_id(self):
        """更新网络"""
        suf_api = '/networks/{id}'
        status_code, response_json = self.client.put(suf_api)
        self.assertEqual(status_code, 200)

    def test_delete_networks_id(self):
        """删除网络"""
        suf_api = '/networks/{id}'
        status_code, response_json = self.client.delete(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_networks_id_ip_ip(self):
        """校验ip是否合法"""
        suf_api = '/networks/{id}/ip/{ip}'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_networks_basic(self):
        """获取基础网络"""
        suf_api = '/networks/basic'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_post_networks_basic(self):
        """创建基础网络"""
        suf_api = '/networks/basic'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_get_networks_external_nets(self):
        """获取外部网络列表"""
        suf_api = '/networks/external-nets'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_roles(self):
        """获取角色列表"""
        suf_api = '/roles'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_post_roles(self):
        """创建角色"""
        suf_api = '/roles'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_put_roles_id(self):
        """更新角色"""
        suf_api = '/roles/{id}'
        status_code, response_json = self.client.put(suf_api)
        self.assertEqual(status_code, 200)

    def test_delete_roles_id(self):
        """删除角色"""
        suf_api = '/roles/{id}'
        status_code, response_json = self.client.delete(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_roles_name(self):
        """获取用户角色"""
        suf_api = '/roles/{name}'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_currencies(self):
        """获取货币列表"""
        suf_api = '/currencies'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_post_currencies(self):
        """创建计费货币"""
        suf_api = '/currencies'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_get_currencies_id(self):
        """获取货币详情"""
        suf_api = '/currencies/{id}'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_delete_currencies_id(self):
        """删除计费货币"""
        suf_api = '/currencies/{id}'
        status_code, response_json = self.client.delete(suf_api)
        self.assertEqual(status_code, 200)

    def test_post_auth_checkOldPass(self):
        """检查密码"""
        suf_api = '/auth/checkOldPass'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_put_auth_logout(self):
        """登出"""
        suf_api = '/auth/logout'
        status_code, response_json = self.client.put(suf_api)
        self.assertEqual(status_code, 200)

    def test_post_auth_modify(self):
        """修改用户密码"""
        suf_api = '/auth/modify'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_post_auth_tokens(self):
        """登录"""
        suf_api = '/auth/tokens'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_get_loadbalances(self):
        """获取负载均衡一览"""
        suf_api = '/loadbalances'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_post_loadbalances(self):
        """创建负载均衡"""
        suf_api = '/loadbalances'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_get_loadbalances_id(self):
        """获取负载均衡详细"""
        suf_api = '/loadbalances/{id}'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_delete_loadbalances_id(self):
        """删除负载均衡"""
        suf_api = '/loadbalances/{id}'
        status_code, response_json = self.client.delete(suf_api)
        self.assertEqual(status_code, 200)

    def test_delete_loadbalances_id_ports_portId(self):
        """负载均衡移除端口"""
        suf_api = '/loadbalances/{id}/ports/{portId}'
        status_code, response_json = self.client.delete(suf_api)
        self.assertEqual(status_code, 200)

    def test_post_loadbalances_id_posts(self):
        """负载均衡添加端口"""
        suf_api = '/loadbalances/{id}/posts'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_get_loadbalances_config(self):
        """获取负载均衡配置"""
        suf_api = '/loadbalances/config'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_loadbalances_images(self):
        """获取负载均衡镜像列表"""
        suf_api = '/loadbalances/images'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_billing_details_id(self):
        """获取账单详情"""
        suf_api = '/billing-details/{id}'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_billing_general(self):
        """获取当前组织账单"""
        suf_api = '/billing-general'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_billing_statistic(self):
        """获取账单列表"""
        suf_api = '/billing-statistic'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_billing_statistic_export(self):
        """导出账单"""
        suf_api = '/billing-statistic/export'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_billings(self):
        """获取开票账户一览"""
        suf_api = '/billings'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_post_billings(self):
        """创建开票账户"""
        suf_api = '/billings'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_put_billings_id(self):
        """设置默认开票账户"""
        suf_api = '/billings/{id}'
        status_code, response_json = self.client.put(suf_api)
        self.assertEqual(status_code, 200)

    def test_delete_billings_id(self):
        """删除开票账户"""
        suf_api = '/billings/{id}'
        status_code, response_json = self.client.delete(suf_api)
        self.assertEqual(status_code, 200)

    def test_put_billings_id_billingId(self):
        """设置开票账户"""
        suf_api = '/billings/{id}/{billingId}'
        status_code, response_json = self.client.put(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_pools(self):
        """获取资源池一览"""
        suf_api = '/pools'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_post_pools(self):
        """创建资源池"""
        suf_api = '/pools'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_get_pools_id(self):
        """获取资源池详情"""
        suf_api = '/pools/{id}'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_put_pools_id(self):
        """更新资源池"""
        suf_api = '/pools/{id}'
        status_code, response_json = self.client.put(suf_api)
        self.assertEqual(status_code, 200)

    def test_delete_pools_id(self):
        """删除资源池"""
        suf_api = '/pools/{id}'
        status_code, response_json = self.client.delete(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_pools_config(self):
        """获取资源池配置"""
        suf_api = '/pools/config'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_stacks(self):
        """获取资源模板一览"""
        suf_api = '/stacks'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_post_stacks(self):
        """创建资源模板"""
        suf_api = '/stacks'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_get_stacks_id(self):
        """获取资源模板详情"""
        suf_api = '/stacks/{id}'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_put_stacks_id(self):
        """更新资源模板"""
        suf_api = '/stacks/{id}'
        status_code, response_json = self.client.put(suf_api)
        self.assertEqual(status_code, 200)

    def test_delete_stacks_id(self):
        """删除资源模板"""
        suf_api = '/stacks/{id}'
        status_code, response_json = self.client.delete(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_stacks_config(self):
        """获取模板配置"""
        suf_api = '/stacks/config'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_flavors(self):
        """获取全部资源规格列表"""
        suf_api = '/flavors'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_post_flavors(self):
        """创建资源规格"""
        suf_api = '/flavors'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_get_flavors_id(self):
        """获取资源规格详情"""
        suf_api = '/flavors/{id}'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_put_flavors_id(self):
        """更新资源规格"""
        suf_api = '/flavors/{id}'
        status_code, response_json = self.client.put(suf_api)
        self.assertEqual(status_code, 200)

    def test_delete_flavors_id(self):
        """删除资源规格"""
        suf_api = '/flavors/{id}'
        status_code, response_json = self.client.delete(suf_api)
        self.assertEqual(status_code, 200)

    def test_post_flavors_id_extraspecs(self):
        """设置额外规格"""
        suf_api = '/flavors/{id}/extraspecs'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_get_tenant_flavors(self):
        """获取本组织可使用的资源规格列表"""
        suf_api = '/tenant-flavors'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_routers(self):
        """获取路由列表"""
        suf_api = '/routers'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_post_routers(self):
        """创建路由"""
        suf_api = '/routers'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_get_routers_id(self):
        """获取路由详情"""
        suf_api = '/routers/{id}'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_put_routers_id(self):
        """更新路由"""
        suf_api = '/routers/{id}'
        status_code, response_json = self.client.put(suf_api)
        self.assertEqual(status_code, 200)

    def test_delete_routers_id(self):
        """删除路由"""
        suf_api = '/routers/{id}'
        status_code, response_json = self.client.delete(suf_api)
        self.assertEqual(status_code, 200)

    def test_delete_routers_id_disabledGateway(self):
        """路由关闭公网网关"""
        suf_api = '/routers/{id}/disabledGateway'
        status_code, response_json = self.client.delete(suf_api)
        self.assertEqual(status_code, 200)

    def test_put_routers_id_enabledGateway(self):
        """路由开启公网网关"""
        suf_api = '/routers/{id}/enabledGateway'
        status_code, response_json = self.client.put(suf_api)
        self.assertEqual(status_code, 200)

    def test_put_routers_id_ports_portId(self):
        """路由添加端口"""
        suf_api = '/routers/{id}/ports/{portId}'
        status_code, response_json = self.client.put(suf_api)
        self.assertEqual(status_code, 200)

    def test_delete_routers_id_ports_portId(self):
        """路由移除端口"""
        suf_api = '/routers/{id}/ports/{portId}'
        status_code, response_json = self.client.delete(suf_api)
        self.assertEqual(status_code, 200)

    def test_put_routers_id_subnets_subnetId(self):
        """路由添加子网"""
        suf_api = '/routers/{id}/subnets/{subnetId}'
        status_code, response_json = self.client.put(suf_api)
        self.assertEqual(status_code, 200)

    def test_delete_routers_id_subnets_subnetId(self):
        """路由移除子网"""
        suf_api = '/routers/{id}/subnets/{subnetId}'
        status_code, response_json = self.client.delete(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_notification_lists(self):
        """获取通知列表"""
        suf_api = '/notification-lists'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_post_notification_lists(self):
        """创建通知列表"""
        suf_api = '/notification-lists'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_get_notification_lists_id(self):
        """获取通知列表详情"""
        suf_api = '/notification-lists/{id}'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_put_notification_lists_id(self):
        """更新通知列表"""
        suf_api = '/notification-lists/{id}'
        status_code, response_json = self.client.put(suf_api)
        self.assertEqual(status_code, 200)

    def test_delete_notification_lists_id(self):
        """删除通知列表"""
        suf_api = '/notification-lists/{id}'
        status_code, response_json = self.client.delete(suf_api)
        self.assertEqual(status_code, 200)

    def test_post_notification_lists_id_terminals(self):
        """创建终端"""
        suf_api = '/notification-lists/{id}/terminals'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_delete_notification_lists_id_terminals_pid(self):
        """删除终端"""
        suf_api = '/notification-lists/{id}/terminals/{pid}'
        status_code, response_json = self.client.delete(suf_api)
        self.assertEqual(status_code, 200)

    def test_post_notification_lists_terminals_id_verify(self):
        """确认终端"""
        suf_api = '/notification-lists/terminals/{id}/verify'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_get_notifications(self):
        """获取通知消息列表"""
        suf_api = '/notifications'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_delete_notifications(self):
        """删除通知消息"""
        suf_api = '/notifications'
        status_code, response_json = self.client.delete(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_notifications_id(self):
        """获取通知消息详情"""
        suf_api = '/notifications/{id}'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_put_notifications_id(self):
        """更新通知消息"""
        suf_api = '/notifications/{id}'
        status_code, response_json = self.client.put(suf_api)
        self.assertEqual(status_code, 200)

    def test_put_notifications_read(self):
        """更新通知消息列表"""
        suf_api = '/notifications/read'
        status_code, response_json = self.client.put(suf_api)
        self.assertEqual(status_code, 200)

    def test_put_notifications_unread(self):
        """更新通知消息列表"""
        suf_api = '/notifications/unread'
        status_code, response_json = self.client.put(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_quota_fields(self):
        """获取配额定义信息"""
        suf_api = '/quota-fields'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_quota_templates(self):
        """获取配额模板列表"""
        suf_api = '/quota-templates'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_post_quota_templates(self):
        """创建配额模板"""
        suf_api = '/quota-templates'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_get_quota_templates_id(self):
        """获取配额模板详情"""
        suf_api = '/quota-templates/{id}'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_put_quota_templates_id(self):
        """更新配额模板"""
        suf_api = '/quota-templates/{id}'
        status_code, response_json = self.client.put(suf_api)
        self.assertEqual(status_code, 200)

    def test_delete_quota_templates_id(self):
        """删除配额模板"""
        suf_api = '/quota-templates/{id}'
        status_code, response_json = self.client.delete(suf_api)
        self.assertEqual(status_code, 200)

    def test_put_quota_templates_id_tenantId(self):
        """适用配额模板"""
        suf_api = '/quota-templates/{id}/{tenantId}'
        status_code, response_json = self.client.put(suf_api)
        self.assertEqual(status_code, 200)

    def test_put_quota_templates_id_tenants(self):
        """批量适用配额模板"""
        suf_api = '/quota-templates/{id}/tenants'
        status_code, response_json = self.client.put(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_quotas(self):
        """获取配额一览"""
        suf_api = '/quotas'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_put_tenants_quota_templates(self):
        """扩大配额"""
        suf_api = '/tenants/quota-templates'
        status_code, response_json = self.client.put(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_images(self):
        """获取镜像列表"""
        suf_api = '/images'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_post_images(self):
        """创建镜像"""
        suf_api = '/images'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_get_images_id(self):
        """获取镜像详情"""
        suf_api = '/images/{id}'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_put_images_id(self):
        """更新镜像"""
        suf_api = '/images/{id}'
        status_code, response_json = self.client.put(suf_api)
        self.assertEqual(status_code, 200)

    def test_delete_images_id(self):
        """删除镜像"""
        suf_api = '/images/{id}'
        status_code, response_json = self.client.delete(suf_api)
        self.assertEqual(status_code, 200)

    def test_post_images_id_file(self):
        """上传镜像文件"""
        suf_api = '/images/{id}/file'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_put_images_id_file(self):
        """通知文件上传开始"""
        suf_api = '/images/{id}/file'
        status_code, response_json = self.client.put(suf_api)
        self.assertEqual(status_code, 200)

    def test_put_images_id_file_filename(self):
        """通知文件上传完成"""
        suf_api = '/images/{id}/file/{filename}'
        status_code, response_json = self.client.put(suf_api)
        self.assertEqual(status_code, 200)

    def test_put_images_id_status_status(self):
        """重置镜像状态"""
        suf_api = '/images/{id}/status/{status}'
        status_code, response_json = self.client.put(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_images_volumeType_id(self):
        """镜像一览"""
        suf_api = '/images/volumeType/{id}'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_instance_images(self):
        """获取云主机镜像列表"""
        suf_api = '/instance-images'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_private_images(self):
        """获取私有镜像列表"""
        suf_api = '/private-images'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_volume_images(self):
        """获取云硬盘镜像列表"""
        suf_api = '/volume-images'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_get_firewalls(self):
        """获取防火墙一览"""
        suf_api = '/firewalls'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_post_firewalls(self):
        """创建防火墙"""
        suf_api = '/firewalls'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_get_firewalls_id(self):
        """获取防火墙详细"""
        suf_api = '/firewalls/{id}'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

    def test_put_firewalls_id(self):
        """更新防火墙"""
        suf_api = '/firewalls/{id}'
        status_code, response_json = self.client.put(suf_api)
        self.assertEqual(status_code, 200)

    def test_delete_firewalls_id(self):
        """删除防火墙"""
        suf_api = '/firewalls/{id}'
        status_code, response_json = self.client.delete(suf_api)
        self.assertEqual(status_code, 200)

    def test_post_firewalls_id_ports(self):
        """防火墙添加端口"""
        suf_api = '/firewalls/{id}/ports'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_delete_firewalls_id_ports_portId(self):
        """防火墙删除端口"""
        suf_api = '/firewalls/{id}/ports/{portId}'
        status_code, response_json = self.client.delete(suf_api)
        self.assertEqual(status_code, 200)

    def test_post_firewalls_id_start(self):
        """开启防火墙"""
        suf_api = '/firewalls/{id}/start'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_post_firewalls_id_stop(self):
        """关闭防火墙"""
        suf_api = '/firewalls/{id}/stop'
        data={}
        status_code, response_json = self.client.post(suf_api, data)
        self.assertEqual(status_code, 200)

    def test_get_firewalls_config(self):
        """获取防火墙配置"""
        suf_api = '/firewalls/config'
        status_code, response_json = self.client.get(suf_api)
        self.assertEqual(status_code, 200)

